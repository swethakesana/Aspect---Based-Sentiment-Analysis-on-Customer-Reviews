Here's the code implementation for the aspect-based sentiment analysis model:

import pandas as pd
import numpy as np
import nltk
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

# Load the review data
review_data = pd.read_json('review.json', lines=True)

# Preprocess the review text data
nltk.download('punkt')
nltk.download('stopwords')
nltk.download('wordnet')

lemmatizer = WordNetLemmatizer()
stop_words = set(stopwords.words('english'))

def preprocess_text(text):
    tokens = word_tokenize(text)
    tokens = [t for t in tokens if t.isalpha()]
    tokens = [lemmatizer.lemmatize(t) for t in tokens]
    tokens = [t for t in tokens if t not in stop_words]
    return ' '.join(tokens)

review_data['text'] = review_data['text'].apply(preprocess_text)

# Extract aspects from the review text
aspects = ['Food Quality', 'Service', 'Ambience', 'Pricing', 'Cleanliness']

def extract_aspects(text):
    aspect_dict = {}
    for aspect in aspects:
        if aspect in text:
            aspect_dict[aspect] = 1
        else:
            aspect_dict[aspect] = 0
    return aspect_dict

review_data['aspects'] = review_data['text'].apply(extract_aspects)

# Create a sentiment analysis model
from vadersentiment.vaderSentiment import SentimentIntensityAnalyzer

sia = SentimentIntensityAnalyzer()

def sentiment_analysis(text):
    sentiment = sia.polarity_scores(text)
    if sentiment['compound'] >= 0.05:
        return 'Positive'
    elif sentiment['compound'] <= -0.05:
        return 'Negative'
    else:
        return 'Neutral'

review_data['sentiment'] = review_data['text'].apply(sentiment_analysis)

# Pair each extracted aspect with its corresponding sentiment classification
review_data['aspect_sentiment'] = review_data.apply(lambda row: {aspect: sentiment for aspect, sentiment in zip(row['aspects'].keys(), [row['sentiment']] * len(row['aspects'].keys()))}, axis=1)

# Generate insights for each business
business_insights = review_data.groupby('business_id')['aspect_sentiment'].apply(lambda x: pd.Series([dict(y) for y in x])).reset_index()

# Calculate the overall sentiment score for each aspect
business_insights['Food Quality Sentiment'] = business_insights['aspect_sentiment'].apply(lambda x: np.mean([y['Food Quality'] for y in x]))
business_insights['Service Sentiment'] = business_insights['aspect_sentiment'].apply(lambda x: np.mean([y['Service'] for y in x]))
business_insights['Ambience Sentiment'] = business_insights['aspect_sentiment'].apply(lambda x: np.mean([y['Ambience'] for y in x]))
business_insights['Pricing Sentiment'] = business_insights['aspect_sentiment'].apply(lambda x: np.mean([y['Pricing'] for y in x]))
business_insights['Cleanliness Sentiment'] = business_insights['aspect_sentiment'].apply(lambda x: np.mean([y['Cleanliness'] for y in x]))

# Visualize the insights
plt.figure(figsize=(10, 6))
sns.barplot(x='business_id', y='Food Quality Sentiment', data=business_insights)
plt.title('Food Quality Sentiment by Business')
plt.xlabel('Business ID')
plt.ylabel('Sentiment Score')
plt.show()

plt.figure(figsize=(10, 6))
sns.barplot(x='business_id', y='Service Sentiment', data=business_insights)
plt.title('Service Sentiment by Business')
plt.xlabel('Business ID')
plt.ylabel('Sentiment Score')
plt.show()

plt.figure(figsize=(10, 6))
sns.barplot(x='business_id', y='Ambience Sentiment', data=business_insights)
plt.title('Ambience Sentiment by Business')
plt.xlabel('Business ID')
plt.ylabel('Sentiment Score')
plt.show()

plt.figure(figsize=(10, 6))
sns.barplot(x='business_id', y='Pricing Sentiment', data=business_insights)
plt.title('Pricing Sentiment by Business')
plt.xlabel('Business ID')
plt.ylabel('Sentiment Score')
plt.show()

plt.figure(figsize=(10, 6))
sns.barplot(x='business_id', y='Cleanliness Sentiment', data=business_insights)
plt.title('Cleanliness Sentiment by Business')
plt.xlabel('Business ID')
plt.ylabel('Sentiment Score')
plt.show()

This code implementation covers the following steps:

Data preprocessing: Tokenize the review text, remove stop words and punctuation, and lemmatize words to their base form.
Aspect extraction: Extract the five aspects (Food Quality, Service, Ambience, Pricing, and Cleanliness) from the review text using a simple rule-based approach.
Sentiment classification: Use the VaderSentiment library to classify the sentiment of each review sentence as Positive, Negative, or Neutral.
Aspect-sentiment pairing: Pair each extracted aspect with its corresponding sentiment classification.
Insights generation: Generate insights for each business by calculating the overall sentiment score for each aspect.
Visualization: Visualize the insights using bar plots to show the sentiment scores for each aspect by business.
